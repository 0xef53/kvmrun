syntax = "proto3";

package kvmrun.api.types;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/0xef53/kvmrun/api/types;types";

message MachineOpts {
    message Firmware {
        string image = 1;
    }
    message Memory {
        int64 actual = 1;
        int64 total = 2;
    }
    message CPU {
        int64 actual = 1;
        int64 total = 2;
        int32 sockets = 3;
        string model = 4;
        int64 quota = 5;
    }
    message InputDevice {
        string type = 1;
    }
    message Cdrom {
        string name = 1;
        string media = 2;
        string driver = 3;
        bool readonly = 4 [(gogoproto.customname) = "ReadOnly"];
        string addr = 5;
    }
    message Disk {
        string path = 1;
        string driver = 2;
        int64 iops_rd = 3;
        int64 iops_wr = 4;
        string addr = 5;
    }
    message NetIface {
        string ifname = 1;
        string driver = 2;
        string hw_addr = 3;
        string ifup = 4;
        string ifdown = 5;
        string addr = 6;
        uint32 queues = 7;
    }
    message VirtioVSock {
        bool auto = 1;
        uint32 context_id = 2 [(gogoproto.customname) = "ContextID"];
        string addr = 3;
    }
    message CloudInit {
        string path = 1;
    }
    message Kernel {
        string image = 1;
        string initrd = 2;
        string modiso = 3;
        string cmdline = 4;
    }
    message BackendProxy {
        string path = 1;
        string command = 2;
        map<string, string> envs = 3;
    }
    string machine_type = 1;
    Firmware firmware = 2;
    Memory memory = 3;
    CPU cpu = 4 [(gogoproto.customname) = "CPU"];
    repeated InputDevice inputs = 5;
    repeated Cdrom cdrom = 6;
    repeated Disk storage = 7;
    repeated NetIface network = 8;
    VirtioVSock vsock_device = 9 [(gogoproto.customname) = "VSockDev"];
    CloudInit cloudinit_drive = 10 [(gogoproto.customname) = "CIDrive"];
    Kernel kernel = 11;
    repeated BackendProxy proxy = 12;
}

message Machine {
    string name = 1;
    MachineOpts config = 2;
    MachineOpts runtime = 3;
    bool persistent = 4;
    MachineState state = 5;
    int32 pid = 6;
    int64 life_time = 7;
}

enum MachineState {
    NOSTATE = 0;
    STARTING = 1;
    RUNNING = 2;
    PAUSED = 3;
    SHUTDOWN = 4;
    INACTIVE = 5;
    CRASHED = 6;
    INCOMING = 7;
    MIGRATING = 8;
    MIGRATED = 9;
}

message TaskInfo {
    message MigrationInfo {
        message Stat {
            uint64 total = 1;
            uint64 remaining = 2;
            uint64 transferred = 3;
            int32 progress = 4;
            int32 speed = 5;
        }
        string dst_server = 1;
        Stat qemu = 2;
        map<string,Stat> disks = 3;
    }
    enum TaskState {
        UNKNOWN = 0;
        RUNNING = 1;
        COMPLETED = 2;
        FAILED = 3;
    }
    string key = 1;
    TaskState state = 2;
    string state_desc = 3;
    int32 progress = 4;
    oneof stat {
        MigrationInfo migration = 10;
    };
}

message MigrationOverrides {
    string name = 1;
    map<string, string> disks = 2;
}

message IncomingMachineRequisites {
    int32 incoming_port = 1;
    int32 nbd_port = 2 [(gogoproto.customname) = "NBDPort"];
    int32 pid = 3;
}

enum NetIfaceDriver {
    UNDEFINED_NET_DRIVER = 0;
    VIRTIO_NET_PCI = 1;
    RTL8139 = 2;
    E1000 = 3;
}

enum NetIfaceLinkState {
    UNDEFINED_LINK_STATE = 0;
    UP = 1;
    DOWN = 2;
}

enum DiskDriver {
    UNDEFINED_DISK_DRIVER = 0;
    VIRTIO_BLK_PCI = 1;
    SCSI_HD = 2;
    IDE_HD = 3;
}

enum CdromDriver {
    UNDEFINED_CDROM_DRIVER = 0;
    SCSI_CD = 1;
    IDE_CD = 2;
}

enum InputDeviceType {
    UNDEFINED_INPUT_TYPE = 0;
    USB_TABLET = 1;
}

message VNCRequisites {
    string password = 1;
    int32 display = 2;
    int32 port = 3;
    int32 ws_port = 4 [(gogoproto.customname) = "WSPort"];
}

message MachineEvent {
    message Timestamp {
        uint64 seconds = 1;
        uint64 microseconds = 2;
    }
    string type = 1;
    bytes data = 2;
    Timestamp timestamp = 3;
}

message NetworkEndPoint {
    message Port {
        string link_name = 1;
        uint32 link_index = 2;
    }
    message Vlan {
        uint32 vlan_id = 1 [(gogoproto.customname) = "VlanID"];
        repeated Port ports = 3;
    }
    message Vxlan {
        uint32 vni = 1 [(gogoproto.customname) = "VNI"];
        repeated Port ports = 3;
    }
    message IPFabric {
        repeated string ipnets = 1 [(gogoproto.customname) = "IPNets"];
    }
    string link_name = 1;
    uint32 link_index = 2;
    oneof attrs {
        Vlan vlan_attrs = 3;
        Vxlan vxlan_attrs = 4;
        IPFabric ipfabric_attrs = 5 [(gogoproto.customname) = "IPFabricAttrs"];
    }
}
