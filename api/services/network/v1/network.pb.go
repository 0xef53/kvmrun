// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/network/v1/network.proto

package network

import (
	context "context"
	fmt "fmt"
	types "github.com/0xef53/kvmrun/api/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListEndPointsRequest struct {
	Filter               *ListEndPointsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ListEndPointsRequest) Reset()         { *m = ListEndPointsRequest{} }
func (m *ListEndPointsRequest) String() string { return proto.CompactTextString(m) }
func (*ListEndPointsRequest) ProtoMessage()    {}
func (*ListEndPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{0}
}
func (m *ListEndPointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndPointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndPointsRequest.Merge(m, src)
}
func (m *ListEndPointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEndPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndPointsRequest proto.InternalMessageInfo

func (m *ListEndPointsRequest) GetFilter() *ListEndPointsRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ListEndPointsRequest_Filter struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEndPointsRequest_Filter) Reset()         { *m = ListEndPointsRequest_Filter{} }
func (m *ListEndPointsRequest_Filter) String() string { return proto.CompactTextString(m) }
func (*ListEndPointsRequest_Filter) ProtoMessage()    {}
func (*ListEndPointsRequest_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{0, 0}
}
func (m *ListEndPointsRequest_Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndPointsRequest_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndPointsRequest_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndPointsRequest_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndPointsRequest_Filter.Merge(m, src)
}
func (m *ListEndPointsRequest_Filter) XXX_Size() int {
	return m.Size()
}
func (m *ListEndPointsRequest_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndPointsRequest_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndPointsRequest_Filter proto.InternalMessageInfo

type ListEndPointsResponse struct {
	EndPoints            []*types.NetworkEndPoint `protobuf:"bytes,1,rep,name=end_points,json=endPoints,proto3" json:"end_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListEndPointsResponse) Reset()         { *m = ListEndPointsResponse{} }
func (m *ListEndPointsResponse) String() string { return proto.CompactTextString(m) }
func (*ListEndPointsResponse) ProtoMessage()    {}
func (*ListEndPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{1}
}
func (m *ListEndPointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndPointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndPointsResponse.Merge(m, src)
}
func (m *ListEndPointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListEndPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndPointsResponse proto.InternalMessageInfo

func (m *ListEndPointsResponse) GetEndPoints() []*types.NetworkEndPoint {
	if m != nil {
		return m.EndPoints
	}
	return nil
}

type ConfigureRequest struct {
	LinkName string `protobuf:"bytes,1,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	// Types that are valid to be assigned to Attrs:
	//	*ConfigureRequest_Vlan
	//	*ConfigureRequest_Vxlan
	//	*ConfigureRequest_Router
	//	*ConfigureRequest_Bridge
	Attrs                isConfigureRequest_Attrs `protobuf_oneof:"attrs"`
	SecondStage          bool                     `protobuf:"varint,100,opt,name=second_stage,json=secondStage,proto3" json:"second_stage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ConfigureRequest) Reset()         { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()    {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{2}
}
func (m *ConfigureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest.Merge(m, src)
}
func (m *ConfigureRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest proto.InternalMessageInfo

type isConfigureRequest_Attrs interface {
	isConfigureRequest_Attrs()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConfigureRequest_Vlan struct {
	Vlan *ConfigureRequest_VlanAttrs `protobuf:"bytes,2,opt,name=vlan,proto3,oneof" json:"vlan,omitempty"`
}
type ConfigureRequest_Vxlan struct {
	Vxlan *ConfigureRequest_VxlanAttrs `protobuf:"bytes,3,opt,name=vxlan,proto3,oneof" json:"vxlan,omitempty"`
}
type ConfigureRequest_Router struct {
	Router *ConfigureRequest_RouterAttrs `protobuf:"bytes,4,opt,name=router,proto3,oneof" json:"router,omitempty"`
}
type ConfigureRequest_Bridge struct {
	Bridge *ConfigureRequest_BridgeAttrs `protobuf:"bytes,5,opt,name=bridge,proto3,oneof" json:"bridge,omitempty"`
}

func (*ConfigureRequest_Vlan) isConfigureRequest_Attrs()   {}
func (*ConfigureRequest_Vxlan) isConfigureRequest_Attrs()  {}
func (*ConfigureRequest_Router) isConfigureRequest_Attrs() {}
func (*ConfigureRequest_Bridge) isConfigureRequest_Attrs() {}

func (m *ConfigureRequest) GetAttrs() isConfigureRequest_Attrs {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *ConfigureRequest) GetLinkName() string {
	if m != nil {
		return m.LinkName
	}
	return ""
}

func (m *ConfigureRequest) GetVlan() *ConfigureRequest_VlanAttrs {
	if x, ok := m.GetAttrs().(*ConfigureRequest_Vlan); ok {
		return x.Vlan
	}
	return nil
}

func (m *ConfigureRequest) GetVxlan() *ConfigureRequest_VxlanAttrs {
	if x, ok := m.GetAttrs().(*ConfigureRequest_Vxlan); ok {
		return x.Vxlan
	}
	return nil
}

func (m *ConfigureRequest) GetRouter() *ConfigureRequest_RouterAttrs {
	if x, ok := m.GetAttrs().(*ConfigureRequest_Router); ok {
		return x.Router
	}
	return nil
}

func (m *ConfigureRequest) GetBridge() *ConfigureRequest_BridgeAttrs {
	if x, ok := m.GetAttrs().(*ConfigureRequest_Bridge); ok {
		return x.Bridge
	}
	return nil
}

func (m *ConfigureRequest) GetSecondStage() bool {
	if m != nil {
		return m.SecondStage
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConfigureRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConfigureRequest_Vlan)(nil),
		(*ConfigureRequest_Vxlan)(nil),
		(*ConfigureRequest_Router)(nil),
		(*ConfigureRequest_Bridge)(nil),
	}
}

type ConfigureRequest_VlanAttrs struct {
	VlanID               uint32   `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	MTU                  uint32   `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	ParentInterface      string   `protobuf:"bytes,3,opt,name=parent_interface,json=parentInterface,proto3" json:"parent_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureRequest_VlanAttrs) Reset()         { *m = ConfigureRequest_VlanAttrs{} }
func (m *ConfigureRequest_VlanAttrs) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest_VlanAttrs) ProtoMessage()    {}
func (*ConfigureRequest_VlanAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{2, 0}
}
func (m *ConfigureRequest_VlanAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureRequest_VlanAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureRequest_VlanAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureRequest_VlanAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest_VlanAttrs.Merge(m, src)
}
func (m *ConfigureRequest_VlanAttrs) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureRequest_VlanAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest_VlanAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest_VlanAttrs proto.InternalMessageInfo

func (m *ConfigureRequest_VlanAttrs) GetVlanID() uint32 {
	if m != nil {
		return m.VlanID
	}
	return 0
}

func (m *ConfigureRequest_VlanAttrs) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

func (m *ConfigureRequest_VlanAttrs) GetParentInterface() string {
	if m != nil {
		return m.ParentInterface
	}
	return ""
}

type ConfigureRequest_VxlanAttrs struct {
	VNI                  uint32   `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	MTU                  uint32   `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	BindInterface        string   `protobuf:"bytes,3,opt,name=bind_interface,json=bindInterface,proto3" json:"bind_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureRequest_VxlanAttrs) Reset()         { *m = ConfigureRequest_VxlanAttrs{} }
func (m *ConfigureRequest_VxlanAttrs) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest_VxlanAttrs) ProtoMessage()    {}
func (*ConfigureRequest_VxlanAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{2, 1}
}
func (m *ConfigureRequest_VxlanAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureRequest_VxlanAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureRequest_VxlanAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureRequest_VxlanAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest_VxlanAttrs.Merge(m, src)
}
func (m *ConfigureRequest_VxlanAttrs) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureRequest_VxlanAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest_VxlanAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest_VxlanAttrs proto.InternalMessageInfo

func (m *ConfigureRequest_VxlanAttrs) GetVNI() uint32 {
	if m != nil {
		return m.VNI
	}
	return 0
}

func (m *ConfigureRequest_VxlanAttrs) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

func (m *ConfigureRequest_VxlanAttrs) GetBindInterface() string {
	if m != nil {
		return m.BindInterface
	}
	return ""
}

type ConfigureRequest_RouterAttrs struct {
	Addrs                []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
	MTU                  uint32   `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	BindInterface        string   `protobuf:"bytes,3,opt,name=bind_interface,json=bindInterface,proto3" json:"bind_interface,omitempty"`
	DefaultGateway       string   `protobuf:"bytes,4,opt,name=default_gateway,json=defaultGateway,proto3" json:"default_gateway,omitempty"`
	InLimit              uint32   `protobuf:"varint,5,opt,name=in_limit,json=inLimit,proto3" json:"in_limit,omitempty"`
	OutLimit             uint32   `protobuf:"varint,6,opt,name=out_limit,json=outLimit,proto3" json:"out_limit,omitempty"`
	ProcessID            uint32   `protobuf:"varint,100,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureRequest_RouterAttrs) Reset()         { *m = ConfigureRequest_RouterAttrs{} }
func (m *ConfigureRequest_RouterAttrs) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest_RouterAttrs) ProtoMessage()    {}
func (*ConfigureRequest_RouterAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{2, 2}
}
func (m *ConfigureRequest_RouterAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureRequest_RouterAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureRequest_RouterAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureRequest_RouterAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest_RouterAttrs.Merge(m, src)
}
func (m *ConfigureRequest_RouterAttrs) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureRequest_RouterAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest_RouterAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest_RouterAttrs proto.InternalMessageInfo

func (m *ConfigureRequest_RouterAttrs) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *ConfigureRequest_RouterAttrs) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

func (m *ConfigureRequest_RouterAttrs) GetBindInterface() string {
	if m != nil {
		return m.BindInterface
	}
	return ""
}

func (m *ConfigureRequest_RouterAttrs) GetDefaultGateway() string {
	if m != nil {
		return m.DefaultGateway
	}
	return ""
}

func (m *ConfigureRequest_RouterAttrs) GetInLimit() uint32 {
	if m != nil {
		return m.InLimit
	}
	return 0
}

func (m *ConfigureRequest_RouterAttrs) GetOutLimit() uint32 {
	if m != nil {
		return m.OutLimit
	}
	return 0
}

func (m *ConfigureRequest_RouterAttrs) GetProcessID() uint32 {
	if m != nil {
		return m.ProcessID
	}
	return 0
}

type ConfigureRequest_BridgeAttrs struct {
	Ifname               string   `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	MTU                  uint32   `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureRequest_BridgeAttrs) Reset()         { *m = ConfigureRequest_BridgeAttrs{} }
func (m *ConfigureRequest_BridgeAttrs) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest_BridgeAttrs) ProtoMessage()    {}
func (*ConfigureRequest_BridgeAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{2, 3}
}
func (m *ConfigureRequest_BridgeAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureRequest_BridgeAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureRequest_BridgeAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureRequest_BridgeAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest_BridgeAttrs.Merge(m, src)
}
func (m *ConfigureRequest_BridgeAttrs) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureRequest_BridgeAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest_BridgeAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest_BridgeAttrs proto.InternalMessageInfo

func (m *ConfigureRequest_BridgeAttrs) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *ConfigureRequest_BridgeAttrs) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

type DeconfigureRequest struct {
	LinkName string `protobuf:"bytes,1,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	// Types that are valid to be assigned to Attrs:
	//	*DeconfigureRequest_Vlan
	//	*DeconfigureRequest_Vxlan
	//	*DeconfigureRequest_Router
	//	*DeconfigureRequest_Bridge
	Attrs                isDeconfigureRequest_Attrs `protobuf_oneof:"attrs"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DeconfigureRequest) Reset()         { *m = DeconfigureRequest{} }
func (m *DeconfigureRequest) String() string { return proto.CompactTextString(m) }
func (*DeconfigureRequest) ProtoMessage()    {}
func (*DeconfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{3}
}
func (m *DeconfigureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeconfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeconfigureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeconfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeconfigureRequest.Merge(m, src)
}
func (m *DeconfigureRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeconfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeconfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeconfigureRequest proto.InternalMessageInfo

type isDeconfigureRequest_Attrs interface {
	isDeconfigureRequest_Attrs()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DeconfigureRequest_Vlan struct {
	Vlan *DeconfigureRequest_VlanAttrs `protobuf:"bytes,2,opt,name=vlan,proto3,oneof" json:"vlan,omitempty"`
}
type DeconfigureRequest_Vxlan struct {
	Vxlan *DeconfigureRequest_VxlanAttrs `protobuf:"bytes,3,opt,name=vxlan,proto3,oneof" json:"vxlan,omitempty"`
}
type DeconfigureRequest_Router struct {
	Router *DeconfigureRequest_RouterAttrs `protobuf:"bytes,4,opt,name=router,proto3,oneof" json:"router,omitempty"`
}
type DeconfigureRequest_Bridge struct {
	Bridge *DeconfigureRequest_BridgeAttrs `protobuf:"bytes,5,opt,name=bridge,proto3,oneof" json:"bridge,omitempty"`
}

func (*DeconfigureRequest_Vlan) isDeconfigureRequest_Attrs()   {}
func (*DeconfigureRequest_Vxlan) isDeconfigureRequest_Attrs()  {}
func (*DeconfigureRequest_Router) isDeconfigureRequest_Attrs() {}
func (*DeconfigureRequest_Bridge) isDeconfigureRequest_Attrs() {}

func (m *DeconfigureRequest) GetAttrs() isDeconfigureRequest_Attrs {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *DeconfigureRequest) GetLinkName() string {
	if m != nil {
		return m.LinkName
	}
	return ""
}

func (m *DeconfigureRequest) GetVlan() *DeconfigureRequest_VlanAttrs {
	if x, ok := m.GetAttrs().(*DeconfigureRequest_Vlan); ok {
		return x.Vlan
	}
	return nil
}

func (m *DeconfigureRequest) GetVxlan() *DeconfigureRequest_VxlanAttrs {
	if x, ok := m.GetAttrs().(*DeconfigureRequest_Vxlan); ok {
		return x.Vxlan
	}
	return nil
}

func (m *DeconfigureRequest) GetRouter() *DeconfigureRequest_RouterAttrs {
	if x, ok := m.GetAttrs().(*DeconfigureRequest_Router); ok {
		return x.Router
	}
	return nil
}

func (m *DeconfigureRequest) GetBridge() *DeconfigureRequest_BridgeAttrs {
	if x, ok := m.GetAttrs().(*DeconfigureRequest_Bridge); ok {
		return x.Bridge
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeconfigureRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeconfigureRequest_Vlan)(nil),
		(*DeconfigureRequest_Vxlan)(nil),
		(*DeconfigureRequest_Router)(nil),
		(*DeconfigureRequest_Bridge)(nil),
	}
}

type DeconfigureRequest_VlanAttrs struct {
	VlanID               uint32   `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeconfigureRequest_VlanAttrs) Reset()         { *m = DeconfigureRequest_VlanAttrs{} }
func (m *DeconfigureRequest_VlanAttrs) String() string { return proto.CompactTextString(m) }
func (*DeconfigureRequest_VlanAttrs) ProtoMessage()    {}
func (*DeconfigureRequest_VlanAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{3, 0}
}
func (m *DeconfigureRequest_VlanAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeconfigureRequest_VlanAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeconfigureRequest_VlanAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeconfigureRequest_VlanAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeconfigureRequest_VlanAttrs.Merge(m, src)
}
func (m *DeconfigureRequest_VlanAttrs) XXX_Size() int {
	return m.Size()
}
func (m *DeconfigureRequest_VlanAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_DeconfigureRequest_VlanAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_DeconfigureRequest_VlanAttrs proto.InternalMessageInfo

func (m *DeconfigureRequest_VlanAttrs) GetVlanID() uint32 {
	if m != nil {
		return m.VlanID
	}
	return 0
}

type DeconfigureRequest_VxlanAttrs struct {
	VNI                  uint32   `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeconfigureRequest_VxlanAttrs) Reset()         { *m = DeconfigureRequest_VxlanAttrs{} }
func (m *DeconfigureRequest_VxlanAttrs) String() string { return proto.CompactTextString(m) }
func (*DeconfigureRequest_VxlanAttrs) ProtoMessage()    {}
func (*DeconfigureRequest_VxlanAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{3, 1}
}
func (m *DeconfigureRequest_VxlanAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeconfigureRequest_VxlanAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeconfigureRequest_VxlanAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeconfigureRequest_VxlanAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeconfigureRequest_VxlanAttrs.Merge(m, src)
}
func (m *DeconfigureRequest_VxlanAttrs) XXX_Size() int {
	return m.Size()
}
func (m *DeconfigureRequest_VxlanAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_DeconfigureRequest_VxlanAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_DeconfigureRequest_VxlanAttrs proto.InternalMessageInfo

func (m *DeconfigureRequest_VxlanAttrs) GetVNI() uint32 {
	if m != nil {
		return m.VNI
	}
	return 0
}

type DeconfigureRequest_RouterAttrs struct {
	BindInterface        string   `protobuf:"bytes,1,opt,name=bind_interface,json=bindInterface,proto3" json:"bind_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeconfigureRequest_RouterAttrs) Reset()         { *m = DeconfigureRequest_RouterAttrs{} }
func (m *DeconfigureRequest_RouterAttrs) String() string { return proto.CompactTextString(m) }
func (*DeconfigureRequest_RouterAttrs) ProtoMessage()    {}
func (*DeconfigureRequest_RouterAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{3, 2}
}
func (m *DeconfigureRequest_RouterAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeconfigureRequest_RouterAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeconfigureRequest_RouterAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeconfigureRequest_RouterAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeconfigureRequest_RouterAttrs.Merge(m, src)
}
func (m *DeconfigureRequest_RouterAttrs) XXX_Size() int {
	return m.Size()
}
func (m *DeconfigureRequest_RouterAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_DeconfigureRequest_RouterAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_DeconfigureRequest_RouterAttrs proto.InternalMessageInfo

func (m *DeconfigureRequest_RouterAttrs) GetBindInterface() string {
	if m != nil {
		return m.BindInterface
	}
	return ""
}

type DeconfigureRequest_BridgeAttrs struct {
	Ifname               string   `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeconfigureRequest_BridgeAttrs) Reset()         { *m = DeconfigureRequest_BridgeAttrs{} }
func (m *DeconfigureRequest_BridgeAttrs) String() string { return proto.CompactTextString(m) }
func (*DeconfigureRequest_BridgeAttrs) ProtoMessage()    {}
func (*DeconfigureRequest_BridgeAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffef3a485992dba, []int{3, 3}
}
func (m *DeconfigureRequest_BridgeAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeconfigureRequest_BridgeAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeconfigureRequest_BridgeAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeconfigureRequest_BridgeAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeconfigureRequest_BridgeAttrs.Merge(m, src)
}
func (m *DeconfigureRequest_BridgeAttrs) XXX_Size() int {
	return m.Size()
}
func (m *DeconfigureRequest_BridgeAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_DeconfigureRequest_BridgeAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_DeconfigureRequest_BridgeAttrs proto.InternalMessageInfo

func (m *DeconfigureRequest_BridgeAttrs) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func init() {
	proto.RegisterType((*ListEndPointsRequest)(nil), "kvmrun.api.services.network.v1.ListEndPointsRequest")
	proto.RegisterType((*ListEndPointsRequest_Filter)(nil), "kvmrun.api.services.network.v1.ListEndPointsRequest.Filter")
	proto.RegisterType((*ListEndPointsResponse)(nil), "kvmrun.api.services.network.v1.ListEndPointsResponse")
	proto.RegisterType((*ConfigureRequest)(nil), "kvmrun.api.services.network.v1.ConfigureRequest")
	proto.RegisterType((*ConfigureRequest_VlanAttrs)(nil), "kvmrun.api.services.network.v1.ConfigureRequest.VlanAttrs")
	proto.RegisterType((*ConfigureRequest_VxlanAttrs)(nil), "kvmrun.api.services.network.v1.ConfigureRequest.VxlanAttrs")
	proto.RegisterType((*ConfigureRequest_RouterAttrs)(nil), "kvmrun.api.services.network.v1.ConfigureRequest.RouterAttrs")
	proto.RegisterType((*ConfigureRequest_BridgeAttrs)(nil), "kvmrun.api.services.network.v1.ConfigureRequest.BridgeAttrs")
	proto.RegisterType((*DeconfigureRequest)(nil), "kvmrun.api.services.network.v1.DeconfigureRequest")
	proto.RegisterType((*DeconfigureRequest_VlanAttrs)(nil), "kvmrun.api.services.network.v1.DeconfigureRequest.VlanAttrs")
	proto.RegisterType((*DeconfigureRequest_VxlanAttrs)(nil), "kvmrun.api.services.network.v1.DeconfigureRequest.VxlanAttrs")
	proto.RegisterType((*DeconfigureRequest_RouterAttrs)(nil), "kvmrun.api.services.network.v1.DeconfigureRequest.RouterAttrs")
	proto.RegisterType((*DeconfigureRequest_BridgeAttrs)(nil), "kvmrun.api.services.network.v1.DeconfigureRequest.BridgeAttrs")
}

func init() { proto.RegisterFile("services/network/v1/network.proto", fileDescriptor_3ffef3a485992dba) }

var fileDescriptor_3ffef3a485992dba = []byte{
	// 818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xdf, 0x6e, 0xdb, 0x36,
	0x14, 0xc6, 0xa3, 0x3a, 0x96, 0xad, 0xe3, 0x39, 0xed, 0x88, 0xae, 0x70, 0x55, 0xc0, 0x49, 0x3c,
	0x14, 0xcd, 0x80, 0x4d, 0x4a, 0xdd, 0x16, 0x18, 0xd6, 0x6d, 0xe8, 0xbc, 0xb4, 0x9b, 0x81, 0x2e,
	0x08, 0xe8, 0x35, 0xeb, 0xb6, 0x0b, 0x43, 0xb6, 0x68, 0x8d, 0x88, 0x4d, 0x6a, 0x12, 0xa5, 0x24,
	0x37, 0x7b, 0xbc, 0x61, 0x57, 0xc3, 0xf6, 0x02, 0xc1, 0xe0, 0x67, 0xd8, 0x03, 0x0c, 0x24, 0x25,
	0xc7, 0xff, 0x96, 0xc4, 0xee, 0x8d, 0x21, 0x7e, 0xe4, 0xf9, 0x1d, 0xf1, 0xf0, 0x7c, 0x16, 0x61,
	0x37, 0x26, 0x51, 0x4a, 0xfb, 0x24, 0x76, 0x19, 0x11, 0xa7, 0x3c, 0x3a, 0x71, 0xd3, 0xc7, 0xf9,
	0xa3, 0x13, 0x46, 0x5c, 0x70, 0x54, 0x3f, 0x49, 0x47, 0x51, 0xc2, 0x1c, 0x2f, 0xa4, 0x4e, 0xbe,
	0xda, 0xc9, 0x97, 0xa4, 0x8f, 0xed, 0x07, 0x01, 0xe7, 0xc1, 0x90, 0xb8, 0x6a, 0x75, 0x2f, 0x19,
	0xb8, 0x64, 0x14, 0x8a, 0x73, 0x1d, 0x6c, 0x7f, 0x12, 0x50, 0xf1, 0x4b, 0xd2, 0x73, 0xfa, 0x7c,
	0xe4, 0x06, 0x3c, 0xe0, 0x97, 0xab, 0xe4, 0x48, 0x0d, 0xd4, 0x53, 0xb6, 0xfc, 0x7d, 0x71, 0x1e,
	0x92, 0xd8, 0x55, 0xbf, 0x5a, 0x6a, 0x24, 0x70, 0xf7, 0x35, 0x8d, 0xc5, 0x4b, 0xe6, 0x1f, 0x71,
	0xca, 0x44, 0x8c, 0xc9, 0xaf, 0x09, 0x89, 0x05, 0xea, 0x80, 0x39, 0xa0, 0x43, 0x41, 0xa2, 0x9a,
	0xb1, 0x63, 0xec, 0x55, 0x9a, 0xcf, 0x9d, 0xab, 0xdf, 0xd3, 0x59, 0x46, 0x71, 0x5e, 0x29, 0x04,
	0xce, 0x50, 0x76, 0x19, 0x4c, 0xad, 0x34, 0x7e, 0x84, 0x0f, 0xe6, 0x02, 0xe2, 0x90, 0xb3, 0x98,
	0xa0, 0x17, 0x00, 0x84, 0xf9, 0xdd, 0x50, 0xa9, 0x35, 0x63, 0xa7, 0xb0, 0x57, 0x69, 0xee, 0x4e,
	0xe7, 0xd6, 0x2f, 0x7f, 0xa8, 0x13, 0xe7, 0xf1, 0xd8, 0x22, 0x39, 0xa9, 0xf1, 0x67, 0x09, 0xee,
	0x7c, 0xcd, 0xd9, 0x80, 0x06, 0x49, 0x44, 0xf2, 0xed, 0x3c, 0x00, 0x6b, 0x48, 0xd9, 0x49, 0x97,
	0x79, 0x23, 0xa2, 0x76, 0x64, 0xe1, 0xb2, 0x14, 0x0e, 0xbd, 0x11, 0x41, 0x47, 0xb0, 0x99, 0x0e,
	0x3d, 0x56, 0xbb, 0xa5, 0x76, 0xfa, 0xd9, 0x75, 0x3b, 0x9d, 0x87, 0x3b, 0xc7, 0x43, 0x8f, 0x7d,
	0x25, 0x44, 0x14, 0x7f, 0xbb, 0x81, 0x15, 0x09, 0x75, 0xa0, 0x98, 0x9e, 0x49, 0x64, 0xe1, 0x66,
	0xc5, 0x5b, 0x44, 0x9e, 0x4d, 0x31, 0x35, 0x0b, 0x1d, 0x83, 0x19, 0xf1, 0x44, 0x1e, 0xc9, 0xa6,
	0xa2, 0x7e, 0xbe, 0x32, 0x15, 0xab, 0xf0, 0x1c, 0x9b, 0xd1, 0x24, 0xb7, 0x17, 0x51, 0x3f, 0x20,
	0xb5, 0xe2, 0x9a, 0xdc, 0x96, 0x0a, 0x9f, 0x70, 0x35, 0x0d, 0xed, 0xc2, 0x7b, 0x31, 0xe9, 0x73,
	0xe6, 0x77, 0x63, 0xe1, 0x05, 0xa4, 0xe6, 0xef, 0x18, 0x7b, 0x65, 0x5c, 0xd1, 0x5a, 0x47, 0x4a,
	0x76, 0x0a, 0xd6, 0xa4, 0x78, 0xe8, 0x43, 0x28, 0xc9, 0xe2, 0x75, 0xa9, 0xaf, 0x4e, 0xa8, 0xda,
	0x82, 0xf1, 0xc5, 0xb6, 0x29, 0xe7, 0xdb, 0x07, 0xd8, 0x94, 0x53, 0x6d, 0x1f, 0xdd, 0x87, 0xc2,
	0x48, 0x24, 0xea, 0xa8, 0xaa, 0xad, 0xd2, 0xf8, 0x62, 0xbb, 0xf0, 0xdd, 0xf7, 0x6f, 0xb0, 0xd4,
	0xd0, 0x47, 0x70, 0x27, 0xf4, 0x22, 0xc2, 0x44, 0x97, 0x32, 0x41, 0xa2, 0x81, 0xd7, 0x27, 0xaa,
	0xfe, 0x16, 0xbe, 0xad, 0xf5, 0x76, 0x2e, 0xdb, 0x14, 0xe0, 0xb2, 0xc2, 0x92, 0x99, 0x32, 0x9a,
	0x25, 0x55, 0xcc, 0xe3, 0xc3, 0x36, 0x96, 0xda, 0x55, 0xe9, 0x1e, 0xc2, 0x56, 0x8f, 0x32, 0x7f,
	0x21, 0x59, 0x55, 0xaa, 0x97, 0xa9, 0xfe, 0x35, 0xa0, 0x32, 0x55, 0x77, 0x74, 0x17, 0x8a, 0x9e,
	0xef, 0x47, 0xba, 0xb7, 0x2d, 0xac, 0x07, 0xef, 0x9e, 0x07, 0x3d, 0x82, 0xdb, 0x3e, 0x19, 0x78,
	0xc9, 0x50, 0x74, 0x03, 0x4f, 0x90, 0x53, 0xef, 0x5c, 0xb5, 0x89, 0x85, 0xb7, 0x32, 0xf9, 0x1b,
	0xad, 0xa2, 0xfb, 0x50, 0xa6, 0xac, 0x3b, 0xa4, 0x23, 0x2a, 0xd4, 0x81, 0x57, 0x71, 0x89, 0xb2,
	0xd7, 0x72, 0x28, 0x5d, 0xc2, 0x13, 0x91, 0xcd, 0x99, 0x6a, 0xae, 0xcc, 0x13, 0xa1, 0x27, 0x3f,
	0x06, 0x08, 0x23, 0xde, 0x27, 0x71, 0x2c, 0x4f, 0xc8, 0x57, 0x6f, 0x5a, 0x1d, 0x5f, 0x6c, 0x5b,
	0x47, 0x5a, 0x6d, 0x1f, 0x60, 0x2b, 0x5b, 0xd0, 0xf6, 0xed, 0x17, 0x50, 0x99, 0xea, 0x0a, 0x74,
	0x0f, 0x4c, 0x3a, 0x98, 0x32, 0x5f, 0x36, 0xba, 0x62, 0xdf, 0xad, 0x12, 0x14, 0x3d, 0x19, 0xdb,
	0xf8, 0x7b, 0x13, 0xd0, 0x81, 0x6c, 0x9a, 0x15, 0x2c, 0x8d, 0x67, 0x2c, 0x7d, 0x6d, 0x47, 0x2f,
	0xe2, 0x97, 0x98, 0xfa, 0xcd, 0xac, 0xa9, 0xbf, 0x58, 0x07, 0xba, 0xc4, 0xd6, 0x6f, 0xe7, 0x6c,
	0xfd, 0xe5, 0x1a, 0xdc, 0xe5, 0xc6, 0x7e, 0x3b, 0x67, 0xec, 0x75, 0xc8, 0x4b, 0xad, 0x6d, 0xef,
	0xaf, 0xea, 0x5b, 0xfb, 0xd1, 0x0d, 0x1d, 0x67, 0x3f, 0x9d, 0xb5, 0xcb, 0x62, 0xf7, 0x1b, 0xcb,
	0x5c, 0xf6, 0xf0, 0x46, 0xed, 0x36, 0xe9, 0xa9, 0xe6, 0xef, 0xb7, 0x60, 0x2b, 0xfb, 0x86, 0x74,
	0x74, 0x21, 0xd0, 0x6f, 0x50, 0x9d, 0xf9, 0x24, 0xa1, 0xa7, 0xeb, 0x7c, 0xf2, 0xec, 0x67, 0x2b,
	0x46, 0xe9, 0xef, 0x5e, 0x63, 0x03, 0xfd, 0x00, 0xd6, 0xe4, 0x8f, 0x15, 0xed, 0xaf, 0xfa, 0x1f,
	0x6c, 0xdf, 0x73, 0xf4, 0x45, 0xc1, 0xc9, 0xaf, 0x00, 0xce, 0x4b, 0x79, 0x51, 0x68, 0x6c, 0xa0,
	0x9f, 0xa1, 0x32, 0x75, 0xb0, 0xa8, 0xb9, 0x7a, 0x17, 0xfc, 0x3f, 0xbc, 0xf5, 0xea, 0x8f, 0x71,
	0xdd, 0xf8, 0x6b, 0x5c, 0x37, 0xfe, 0x19, 0xd7, 0x8d, 0x9f, 0x3e, 0x9d, 0xba, 0x8f, 0xec, 0x9f,
	0x91, 0xc1, 0xb3, 0x27, 0xae, 0x4e, 0xe6, 0x7a, 0x21, 0x75, 0x97, 0x5c, 0x86, 0x9e, 0x67, 0x8f,
	0x3d, 0x53, 0x91, 0x9f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x0a, 0xe1, 0x86, 0x32, 0x09,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	ListEndPoints(ctx context.Context, in *ListEndPointsRequest, opts ...grpc.CallOption) (*ListEndPointsResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Deconfigure(ctx context.Context, in *DeconfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) ListEndPoints(ctx context.Context, in *ListEndPointsRequest, opts ...grpc.CallOption) (*ListEndPointsResponse, error) {
	out := new(ListEndPointsResponse)
	err := c.cc.Invoke(ctx, "/kvmrun.api.services.network.v1.NetworkService/ListEndPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kvmrun.api.services.network.v1.NetworkService/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Deconfigure(ctx context.Context, in *DeconfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kvmrun.api.services.network.v1.NetworkService/Deconfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	ListEndPoints(context.Context, *ListEndPointsRequest) (*ListEndPointsResponse, error)
	Configure(context.Context, *ConfigureRequest) (*empty.Empty, error)
	Deconfigure(context.Context, *DeconfigureRequest) (*empty.Empty, error)
}

// UnimplementedNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (*UnimplementedNetworkServiceServer) ListEndPoints(ctx context.Context, req *ListEndPointsRequest) (*ListEndPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndPoints not implemented")
}
func (*UnimplementedNetworkServiceServer) Configure(ctx context.Context, req *ConfigureRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedNetworkServiceServer) Deconfigure(ctx context.Context, req *DeconfigureRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deconfigure not implemented")
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_ListEndPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).ListEndPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvmrun.api.services.network.v1.NetworkService/ListEndPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).ListEndPoints(ctx, req.(*ListEndPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvmrun.api.services.network.v1.NetworkService/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Deconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeconfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Deconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvmrun.api.services.network.v1.NetworkService/Deconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Deconfigure(ctx, req.(*DeconfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kvmrun.api.services.network.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEndPoints",
			Handler:    _NetworkService_ListEndPoints_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _NetworkService_Configure_Handler,
		},
		{
			MethodName: "Deconfigure",
			Handler:    _NetworkService_Deconfigure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/network/v1/network.proto",
}

func (m *ListEndPointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndPointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndPointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListEndPointsRequest_Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndPointsRequest_Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndPointsRequest_Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListEndPointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndPointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndPointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndPoints) > 0 {
		for iNdEx := len(m.EndPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EndPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetwork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SecondStage {
		i--
		if m.SecondStage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Attrs != nil {
		{
			size := m.Attrs.Size()
			i -= size
			if _, err := m.Attrs.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.LinkName) > 0 {
		i -= len(m.LinkName)
		copy(dAtA[i:], m.LinkName)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.LinkName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureRequest_Vlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_Vlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vlan != nil {
		{
			size, err := m.Vlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ConfigureRequest_Vxlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_Vxlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vxlan != nil {
		{
			size, err := m.Vxlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ConfigureRequest_Router) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_Router) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Router != nil {
		{
			size, err := m.Router.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ConfigureRequest_Bridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_Bridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bridge != nil {
		{
			size, err := m.Bridge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ConfigureRequest_VlanAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureRequest_VlanAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_VlanAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParentInterface) > 0 {
		i -= len(m.ParentInterface)
		copy(dAtA[i:], m.ParentInterface)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.ParentInterface)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MTU != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.MTU))
		i--
		dAtA[i] = 0x10
	}
	if m.VlanID != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.VlanID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureRequest_VxlanAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureRequest_VxlanAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_VxlanAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BindInterface) > 0 {
		i -= len(m.BindInterface)
		copy(dAtA[i:], m.BindInterface)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.BindInterface)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MTU != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.MTU))
		i--
		dAtA[i] = 0x10
	}
	if m.VNI != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.VNI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureRequest_RouterAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureRequest_RouterAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_RouterAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProcessID != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.ProcessID))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.OutLimit != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.OutLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.InLimit != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.InLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DefaultGateway) > 0 {
		i -= len(m.DefaultGateway)
		copy(dAtA[i:], m.DefaultGateway)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.DefaultGateway)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BindInterface) > 0 {
		i -= len(m.BindInterface)
		copy(dAtA[i:], m.BindInterface)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.BindInterface)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MTU != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.MTU))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureRequest_BridgeAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureRequest_BridgeAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest_BridgeAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MTU != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.MTU))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ifname) > 0 {
		i -= len(m.Ifname)
		copy(dAtA[i:], m.Ifname)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Ifname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeconfigureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeconfigureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attrs != nil {
		{
			size := m.Attrs.Size()
			i -= size
			if _, err := m.Attrs.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.LinkName) > 0 {
		i -= len(m.LinkName)
		copy(dAtA[i:], m.LinkName)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.LinkName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeconfigureRequest_Vlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_Vlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vlan != nil {
		{
			size, err := m.Vlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DeconfigureRequest_Vxlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_Vxlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vxlan != nil {
		{
			size, err := m.Vxlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DeconfigureRequest_Router) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_Router) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Router != nil {
		{
			size, err := m.Router.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DeconfigureRequest_Bridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_Bridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bridge != nil {
		{
			size, err := m.Bridge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DeconfigureRequest_VlanAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeconfigureRequest_VlanAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_VlanAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VlanID != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.VlanID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeconfigureRequest_VxlanAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeconfigureRequest_VxlanAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_VxlanAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VNI != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.VNI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeconfigureRequest_RouterAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeconfigureRequest_RouterAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_RouterAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BindInterface) > 0 {
		i -= len(m.BindInterface)
		copy(dAtA[i:], m.BindInterface)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.BindInterface)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeconfigureRequest_BridgeAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeconfigureRequest_BridgeAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeconfigureRequest_BridgeAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ifname) > 0 {
		i -= len(m.Ifname)
		copy(dAtA[i:], m.Ifname)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Ifname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListEndPointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListEndPointsRequest_Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListEndPointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EndPoints) > 0 {
		for _, e := range m.EndPoints {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LinkName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Attrs != nil {
		n += m.Attrs.Size()
	}
	if m.SecondStage {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureRequest_Vlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vlan != nil {
		l = m.Vlan.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *ConfigureRequest_Vxlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vxlan != nil {
		l = m.Vxlan.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *ConfigureRequest_Router) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Router != nil {
		l = m.Router.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *ConfigureRequest_Bridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bridge != nil {
		l = m.Bridge.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *ConfigureRequest_VlanAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VlanID != 0 {
		n += 1 + sovNetwork(uint64(m.VlanID))
	}
	if m.MTU != 0 {
		n += 1 + sovNetwork(uint64(m.MTU))
	}
	l = len(m.ParentInterface)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureRequest_VxlanAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VNI != 0 {
		n += 1 + sovNetwork(uint64(m.VNI))
	}
	if m.MTU != 0 {
		n += 1 + sovNetwork(uint64(m.MTU))
	}
	l = len(m.BindInterface)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureRequest_RouterAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.MTU != 0 {
		n += 1 + sovNetwork(uint64(m.MTU))
	}
	l = len(m.BindInterface)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.DefaultGateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.InLimit != 0 {
		n += 1 + sovNetwork(uint64(m.InLimit))
	}
	if m.OutLimit != 0 {
		n += 1 + sovNetwork(uint64(m.OutLimit))
	}
	if m.ProcessID != 0 {
		n += 2 + sovNetwork(uint64(m.ProcessID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureRequest_BridgeAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ifname)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.MTU != 0 {
		n += 1 + sovNetwork(uint64(m.MTU))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeconfigureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LinkName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Attrs != nil {
		n += m.Attrs.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeconfigureRequest_Vlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vlan != nil {
		l = m.Vlan.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *DeconfigureRequest_Vxlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vxlan != nil {
		l = m.Vxlan.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *DeconfigureRequest_Router) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Router != nil {
		l = m.Router.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *DeconfigureRequest_Bridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bridge != nil {
		l = m.Bridge.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *DeconfigureRequest_VlanAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VlanID != 0 {
		n += 1 + sovNetwork(uint64(m.VlanID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeconfigureRequest_VxlanAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VNI != 0 {
		n += 1 + sovNetwork(uint64(m.VNI))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeconfigureRequest_RouterAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BindInterface)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeconfigureRequest_BridgeAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ifname)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListEndPointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndPointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndPointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ListEndPointsRequest_Filter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndPointsRequest_Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndPointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndPointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndPointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndPoints = append(m.EndPoints, &types.NetworkEndPoint{})
			if err := m.EndPoints[len(m.EndPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigureRequest_VlanAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &ConfigureRequest_Vlan{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vxlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigureRequest_VxlanAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &ConfigureRequest_Vxlan{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigureRequest_RouterAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &ConfigureRequest_Router{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigureRequest_BridgeAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &ConfigureRequest_Bridge{v}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondStage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecondStage = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureRequest_VlanAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanID", wireType)
			}
			m.VlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureRequest_VxlanAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VxlanAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VxlanAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VNI", wireType)
			}
			m.VNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VNI |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureRequest_RouterAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouterAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouterAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InLimit", wireType)
			}
			m.InLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutLimit", wireType)
			}
			m.OutLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessID", wireType)
			}
			m.ProcessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureRequest_BridgeAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ifname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeconfigureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeconfigureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeconfigureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeconfigureRequest_VlanAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &DeconfigureRequest_Vlan{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vxlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeconfigureRequest_VxlanAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &DeconfigureRequest_Vxlan{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeconfigureRequest_RouterAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &DeconfigureRequest_Router{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeconfigureRequest_BridgeAttrs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attrs = &DeconfigureRequest_Bridge{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeconfigureRequest_VlanAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanID", wireType)
			}
			m.VlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeconfigureRequest_VxlanAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VxlanAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VxlanAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VNI", wireType)
			}
			m.VNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VNI |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeconfigureRequest_RouterAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouterAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouterAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeconfigureRequest_BridgeAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ifname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetwork = fmt.Errorf("proto: unexpected end of group")
)
